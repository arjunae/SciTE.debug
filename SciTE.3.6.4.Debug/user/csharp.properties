#
# c_sharp keyword definitions for SciTE
#
##Nov 2015 extrapolated from cpp.properties. Now here to  ease maintaining
#

file.patterns.cs=*.cs
*filter.cs=cSharp ( cs )|$(file.patterns.cs)|

# ---- * Wildcard is used to collect marked properties 
# ----  used to dynamically build the Language Menu

#*language.csharp=C&#|cs||

lexer.$(file.patterns.cs)=cpp
# For C# leave lexer.cpp.verbatim.strings.allow.escapes as 0 but change to 1 for Objective C
#lexer.cpp.verbatim.strings.allow.escapes=1

keywordclass.cs=abstract as ascending base bool break by byte case catch char checked \
class const continue decimal default delegate descending do double else enum \
equals event explicit extern false finally fixed float for foreach from goto group if \
implicit in int interface internal into is join lock let long namespace new null \
object on operator orderby out override params private protected public \
readonly ref return sbyte sealed select short sizeof stackalloc static \
string struct switch this throw true try typeof uint ulong \
unchecked unsafe ushort using var virtual void volatile where while

# ---- User defined special keywords use style2 
keywordclass.cs2=

# ---- Objects
keywordclass.cs4=


# flow of control aka if else do loop ....
#keywords2.$(file.patterns.cs)=
# js/jquery1_9 internal functions aka .each()
keywords.$(file.patterns.cs)=$(keywordclass.cs)
 # specials (objects, Selectors)
#keywords4.$(file.patterns.cs)=

word.chars.cs=$(chars.alpha)$(chars.numeric)_#
word.characters.$(file.patterns.cs)=$(word.chars.cs)

cs.api=$(SciteDefaultHome)\api\c_sharp.api;$(SciteDefaultHome)\user\api\c_sharp.api
api.$(file.patterns.cs)=$(SciteDefaultHome)\api\c_sharp.api;$(SciteDefaultHome)\user\api\c_sharp.api

preprocessor.symbol.$(file.patterns.cs)=#
preprocessor.start.$(file.patterns.cs)=if region
preprocessor.middle.$(file.patterns.cs)=else elif
preprocessor.end.$(file.patterns.cs)=endif endregion

calltip.cpp.ignorecase=1

# -------- Comments
comment.block.cs=//~
comment.stream.start.cs=/*
comment.stream.end.cs=*/
comment.box.start.cs=/*
comment.box.middle.cs= *
comment.box.end.cs= */

# -------- Indentation

statement.indent.$(file.patterns.cs)=5 else elseif for function if while
indent.maintain.$(file.patterns.cs)=1
statement.end.$(file.patterns.cs)=10 ;
#statement.lookback.$(file.patterns.cs)=20
block.start.$(file.patterns.cs)=10 {
block.end.$(file.patterns.cs)=10 }
#comment.block.at.line.start.cs=1



if PLAT_WIN
	command.build.*.cs=csc /t:winexe $(FileNameExt) /r:system.dll,system.drawing.dll
	command.go.*.cs=$(FileName)
	command.go.subsystem.*.cs=0
if PLAT_GTK
	command.build.*.cs=mcs /t:winexe $(FileNameExt) /r:System,System.Drawing
	command.go.*.cs=mono $(FileName).exe
	command.go.subsystem.*.cs=1